call <- function(S,T,t,K,r,s,q) {#
	d1 <- (log(S/K)+(r-q+0.5*s^2)*(T-t))/(s*sqrt(T-t))#
	d2 <- d1-s*sqrt(T-t)#
	phi_d1 <- de_int(d1,41)#
	phi_d2 <- de_int(d2,41) #
	S*exp(-q*(T-t))* phi_d1 - K*exp(-r*(T-t))*phi_d2#
}#
#
#5 D#
rho2 <- function(S,T,t,K,r,s,q) {#
	K*(T-t)*exp(-r*(T-t))*call(S,T,t,K,r,s,q)#
}#
#
dr2 <- 0.01#
r2_list <- seq(from = 0, to = 0.4, by = dr2);#
fr2_data <- fr2(r2_list);#
n <- length(fr2_data);#
#
dr2_exact <- rho2(50,0.5,0.0,45,r2_list,0.25,0.02)#
r21 <- first_order(fr2,r2_list,dr2)#
r22 <- second_order(fr2,r2_list,dr2)#
r23 <- fourth_order(fr2,r2_list,dr2)
dr2_exact
call <- function(S,T,t,K,r,s,q) {#
	d1 <- (log(S/K)+(r-q+0.5*s^2)*(T-t))/(s*sqrt(T-t))#
	d2 <- d1-s*sqrt(T-t)#
	phi_d1 <- de_int(d1,1640)#
	phi_d2 <- de_int(d2,1640) #
	S*exp(-q*(T-t))* phi_d1 - K*exp(-r*(T-t))*phi_d2#
}#
#
#5 D#
rho2 <- function(S,T,t,K,r,s,q) {#
	K*(T-t)*exp(-r*(T-t))*call(S,T,t,K,r,s,q)#
}#
#
dr2 <- 0.01#
r2_list <- seq(from = 0, to = 0.4, by = dr2);#
fr2_data <- fr2(r2_list);#
n <- length(fr2_data);#
#
dr2_exact <- rho2(50,0.5,0.0,45,r2_list,0.25,0.02)#
r21 <- first_order(fr2,r2_list,dr2)#
r22 <- second_order(fr2,r2_list,dr2)#
r23 <- fourth_order(fr2,r2_list,dr2)
dr2_exact
#5 c#
call <- function(S,T,t,K,r,s,q) {#
	d1 <- (log(S/K)+(r-q+0.5*s^2)*(T-t))/(s*sqrt(T-t))#
	d2 <- d1-s*sqrt(T-t)#
	phi_d1 <- de_int(d1,16400)#
	phi_d2 <- de_int(d2,16400) #
	S*exp(-q*(T-t))* phi_d1 - K*exp(-r*(T-t))*phi_d2#
}#
#
#5 D#
rho2 <- function(S,T,t,K,r,s,q) {#
	K*(T-t)*exp(-r*(T-t))*call(S,T,t,K,r,s,q)#
}#
#
dr2 <- 0.01#
r2_list <- seq(from = 0, to = 0.4, by = dr2);#
fr2_data <- fr2(r2_list);#
n <- length(fr2_data);#
#
dr2_exact <- rho2(50,0.5,0.0,45,r2_list,0.25,0.02)#
r21 <- first_order(fr2,r2_list,dr2)#
r22 <- second_order(fr2,r2_list,dr2)#
r23 <- fourth_order(fr2,r2_list,dr2)
dr2_exact
dr_exact
rho2 <- function(S,T,t,K,r,s,q) {#
	call(S,T,t,K,r,s,q)#
}#
#
dr2 <- 0.01#
r2_list <- seq(from = 0, to = 0.4, by = dr2);#
fr2_data <- fr2(r2_list);#
n <- length(fr2_data);#
#
dr2_exact <- rho2(50,0.5,0.0,45,r2_list,0.25,0.02)#
r21 <- first_order(fr2,r2_list,dr2)#
r22 <- second_order(fr2,r2_list,dr2)#
r23 <- fourth_order(fr2,r2_list,dr2)
dr2_exact
dr_exact
plot(r2_list,dr2_exact)
lines(r2_list,r21)
r21
r22
r23
r21'
r21
dr_exact
r22
plot(r_list,dr_exact)
lines(r_list,r21)
d3
fourth_order(fS,S_list,50)
fourth_order(fS,50,dt)
fourth_order(fS,50,0.1)
fourth_order(fS,50,0.01)
fourth_order(fS,50,1)
fourth_order(fS,50,10)
delta(50,0.5,0.0,45,0.06,0.25,0.02) - fourth_order(fS,50,1)
delta(50,0.5,0.0,45,0.06,0.25,0.02) - fourth_order(fS,50,0.1)
plot(s_list,vf_exact)
lines(s_list,v1)
lines(s_list,v2)
lines(s_list,v3)
ds <- 0.1#
s_list <- seq(from = 1, to = 5, by = ds);#
fs_data <- fs(s_list);	#
#
n2 <- length(fs_data);#
#
vf_exact <- vega(50,0.5,0.0,45,0.06,s_list,0.02)#
v1 <- first_order(fs,s_list,ds)#
v2 <- second_order(fs,s_list,ds)#
v3 <- fourth_order(fs,s_list,ds)#
#
e1 <- vf_exact[1:(n2-1)] - dv1;
plot(s_list,vf_exact)
lines(s_list,v1)
lines(s_list,v2)
lines(s_list,v3)
plot(t_list,dT_exact)
lines(t_list,T1)
lines(t_list,T2)
lines(t_list,T3)
plot(r_list,dr_exact)
lines(r_list,r1)
lines(r_list,r2)
lines(r_list,r3)
plot(g_list,dg_exact)
lines(g_list,g1)
lines(g_list,g2)
lines(g_list,g3)
first_order(fs,s_list,c(1,0.1,0.01))
first_order(fs,s_list,1)
first_order(fs,s_list,0.1)
first_order(fs,s_list,0.01)
first_order(fs,50,c(1,0.1,0.01))
first_order(fs,0.01,c(1,0.1,0.01))
first_order(fs,0.1,c(1,0.1,0.01))
second_order(fs,0.1,c(1,0.1,0.01))
fourth_order(fs,0.1,c(1,0.1,0.01))
fourth_order(fs,s_list,0.1)
fourth_order(fs,0.06,c(1,0.1,0.01))
fourth_order(fs,0.06,1)
fourth_order(fs,0.06,0.1)
fourth(fs,s_list,1)
fourth_order(fs,s_list,1)
fourth_order(fs,s_list,0.1)
first_order(ft,0,c(1,0.1,0.01))
first_order(ft,0.01,c(1,0.1,0.01))
first_order(ft,0.1,c(1,0.1,0.01))
second_order(ft,0.1,c(1,0.1,0.01))
first_order(ft,t_list,dt)
plot(T1)
lines(t_list,t1)
lines(t_list,T1)
plot(t_list,T1)
lines(t_list,dT_exact)
lines(t_list,T2)
lines(t_list,T3)
dt <- 0.01#
t_list <- seq(from = 0, to = 0.4, by = dt);#
ft_data <- ft(t_list);#
n <- length(ft_data);#
#
dT_exact <- theta(50,0.5,t_list,45,0.06,0.25,0.02)#
T1 <- first_order(ft,t_list,dt)#
T2 <- second_order(ft,t_list,dt)#
T3 <- fourth_order(ft,t_list,dt)
plot(t_list,dT_exact)
lines(t_list,T1)
lines(t_list,T2)
lines(t_list,T3)
fourth_order(fS,50,0.5)
right(f,a,b,10)#
right(f,a,b,100)#
#scales linearly#
pnorm(2) - pnorm(-1) - right(f,a,b,10)#
pnorm(2) - pnorm(-1) - right(f,a,b,100)
e1 <- df_exact[1:(n-1)] - df1;#
e2 <- df_exact[2:(n-1)] - df2;
df_exact <- delta(S_list,0.5,0.0,45,0.06,0.25,0.02);#
d1 <- first_order(fS,S_list,dt)#
d2 <- second_order(fS,S_list,dt)#
d3 <- fourth_order(fS,S_list,dt)#
#
e1 <- df_exact[1:(n-1)] - df1;#
e2 <- df_exact[2:(n-1)] - df2;
dt <- 0.5;#
S_list <- seq(from = 25, to = 100, by = dt);#
f_data <- fS(S_list);#
#
n <- length(f_data);#
df1 <- (f_data[2:n]-f_data[1:(n-1)])/dt;#
df2 <- (f_data[3:n]-f_data[1:(n-2)])/(2*dt);#
#
delta <- function(S,T,t,K,r,s,q) {#
d1 <- (log(S/K)+(r-q+0.5*s^2)*(T-t))/(s*sqrt(T-t))#
exp(-q*(T-t))*pnorm(d1)#
}#
#
df_exact <- delta(S_list,0.5,0.0,45,0.06,0.25,0.02);#
d1 <- first_order(fS,S_list,dt)#
d2 <- second_order(fS,S_list,dt)#
d3 <- fourth_order(fS,S_list,dt)#
#
e1 <- df_exact[1:(n-1)] - df1;#
e2 <- df_exact[2:(n-1)] - df2;
e1
clc
second_order(fS,50,c(1,0.1,0.01))
fourth_order(fS,50,c(1,0.1,0.01))
first_order(fS,50,c(1,0.1,0.01))
delta(S_list,0.5,0.0,45,0.06,0.25,0.02)
delta(50,0.5,0.0,45,0.06,0.25,0.02)
second_order(fS,50,c(1,0.1,0.01)) - delta(50,0.5,0.0,45,0.06,0.25,0.02)
fourth_order(fS,50,c(1,0.1,0.01)) - delta(50,0.5,0.0,45,0.06,0.25,0.02)
first_order(fS,50,c(1,0.1,0.01)) - delta(50,0.5,0.0,45,0.06,0.25,0.02)
first_order(fS,50,c(1,0.1,0.01)) -delta(50,0.5,0.0,45,0.06,0.25,0.02)#
second_order(fS,50,c(1,0.1,0.01)) - delta(50,0.5,0.0,45,0.06,0.25,0.02)#
fourth_order(fS,50,c(1,0.1,0.01)) - delta(50,0.5,0.0,45,0.06,0.25,0.02)
first_order(fS,50,c(1,0.1,0.01)) -delta(50,0.5,0.0,45,0.06,0.25,0.02)
first_order(ft,50,c(1,0.1,0.01)) -theta(50,0.5,0.0,45,0.06,0.25,0.02)
first_order(ft,0.5,c(1,0.1,0.01)) -theta(50,0.5,0.0,45,0.06,0.25,0.02)
first_order(ft,0,c(1,0.1,0.01)) -theta(50,0.5,0.0,45,0.06,0.25,0.02)
first_order(ft,0,c(0.1,0.01,0.001)) -theta(50,0.5,0.0,45,0.06,0.25,0.02)
second_order(ft,0,c(0.1,0.01,0.001)) -theta(50,0.5,0.0,45,0.06,0.25,0.02)#
fourth_order(ft,0,c(0.1,0.01,0.001)) -theta(50,0.5,0.0,45,0.06,0.25,0.02)
first_order(fr,0.06,c(0.1,0.01,0.001)) -rho(50,0.5,0.0,45,0.06,0.25,0.02)
second_order(fr,0.06,c(0.1,0.01,0.001)) -rho(50,0.5,0.0,45,0.06,0.25,0.02)#
fourth_order(fr,0.06,c(0.1,0.01,0.001)) -rho(50,0.5,0.0,45,0.06,0.25,0.02)
first_order(fs,0.25,c(0.1,0.01,0.001)) -vega(50,0.5,0.0,45,0.06,0.25,0.02)
first_order(fs,0.25,c(0.1,0.01,0.001)) -vega(50,0.5,0.0,45,0.06,0.25,0.02)#
second_order(fs,0.25,c(0.1,0.01,0.001)) -vega(50,0.5,0.0,45,0.06,0.25,0.02)
first_order(fs,0.25,c(0.1,0.01,0.001)) -vega(50,0.5,0.0,45,0.06,0.25,0.02)#
second_order(fs,0.25,c(0.1,0.01,0.001)) -vega(50,0.5,0.0,45,0.06,0.25,0.02)#
fourth_order(fs,0.25,c(0.1,0.01,0.001)) -vega(50,0.5,0.0,45,0.06,0.25,0.02)
rho2 <- function(S,T,t,K,r,s,q) {#
	K*(T-t)*exp(-r*(T-t))*call(S,T,t,K,r,s,q)#
}#
#
dr2 <- 0.01#
r2_list <- seq(from = 0, to = 0.4, by = dr2);#
fr2_data <- fr2(r2_list);#
n <- length(fr2_data);#
#
dr2_exact <- rho2(50,0.5,0.0,45,r2_list,0.25,0.02)#
r21 <- first_order(fr2,r2_list,dr2)#
r22 <- second_order(fr2,r2_list,dr2)#
r23 <- fourth_order(fr2,r2_list,dr2)
plot(fr2_list,dr2_exact)
plot(fr2_list,fr2_exact)
plot(r2_list,dr2_exact)
plot(r_list,r_exact)
plot(r_list,dr_exact)
dr_exact
dr2_exact
f
#5 b#
de_int <- function(a,n) {#
	right(f,-10,a,n)#
}#
#
#5 c#
call <- function(S,T,t,K,r,s,q) {#
	d1 <- (log(S/K)+(r-q+0.5*s^2)*(T-t))/(s*sqrt(T-t))#
	d2 <- d1-s*sqrt(T-t)#
	phi_d1 <- de_int(d1,1640)#
	phi_d2 <- de_int(d2,1640) #
	S*exp(-q*(T-t))* phi_d1 - K*exp(-r*(T-t))*phi_d2#
}#
#
#5 D#
rho2 <- function(S,T,t,K,r,s,q) {#
	K*(T-t)*exp(-r*(T-t))*call(S,T,t,K,r,s,q)#
}#
#
dr2 <- 0.01#
r2_list <- seq(from = 0, to = 0.4, by = dr2);#
fr2_data <- fr2(r2_list);#
n <- length(fr2_data);#
#
dr2_exact <- rho2(50,0.5,0.0,45,r2_list,0.25,0.02)#
r21 <- first_order(fr2,r2_list,dr2)#
r22 <- second_order(fr2,r2_list,dr2)#
r23 <- fourth_order(fr2,r2_list,dr2)
dr2_exact
fr2_data
fr_data
plot(fr2_data)
plot(fr_data)
plot(r2_list,r21)
lines(r2_list,r22)
lines(r2_list,r23)
lines(r2_list,fr2_data)
plot(dr2_exact)
dr2_exact
fr2_data
plot(r_list,dr_exact)
lines(r_list,r21)
dr2 <- 0.01#
r2_list <- seq(from = 0, to = 0.4, by = dr2);#
fr2_data <- fr2(r2_list);#
n <- length(fr2_data);#
#
dr2_exact <- rho(50,0.5,0.0,45,r2_list,0.25,0.02)#
r21 <- first_order(fr2,r2_list,dr2)#
r22 <- second_order(fr2,r2_list,dr2)#
r23 <- fourth_order(fr2,r2_list,dr2)
r21
r1
r23
r3
plot(r_list,dr_exact)
lines(r2_list,r21)
lines(r2_list,r22)
lines(r2_list,r23)
dr2 <- 0.01#
r2_list <- seq(from = 0, to = 0.4, by = dr2);#
fr2_data <- fr2(r2_list);#
n <- length(fr2_data);#
#
dr2_exact <- delta(50,0.5,0.0,45,r2_list,0.25,0.02)#
r21 <- first_order(fr2,r2_list,dr2)#
r22 <- second_order(fr2,r2_list,dr2)#
r23 <- fourth_order(fr2,r2_list,dr2)
plot(r21)
plot(dr2_exact)
dr2_exact
r21
r22
r2_list <- seq(from = 25, to = 50, by = dr2);#
fr2_data <- fr2(r2_list);#
n <- length(fr2_data);#
#
dr2_exact <- delta(r,0.5,0.0,45,0.06,0.25,0.02)#
r21 <- first_order(fr2,r2_list,dr2)#
r22 <- second_order(fr2,r2_list,dr2)#
r23 <- fourth_order(fr2,r2_list,dr2)
dr2 <- 0.1#
r2_list <- seq(from = 0, to = 5, by = dr2);#
fr2_data <- fr2(r2_list);#
n <- length(fr2_data);#
#
dr2_exact <- delta(r,0.5,0.0,45,0.06,0.25,0.02)#
r21 <- first_order(fr2,r2_list,dr2)#
r22 <- second_order(fr2,r2_list,dr2)#
r23 <- fourth_order(fr2,r2_list,dr2)
dr2 <- 0.1#
r2_list <- seq(from = 50, to = 55, by = dr2);#
fr2_data <- fr2(r2_list);#
n <- length(fr2_data);#
#
dr2_exact <- delta(r,0.5,0.0,45,0.06,0.25,0.02)#
r21 <- first_order(fr2,r2_list,dr2)#
r22 <- second_order(fr2,r2_list,dr2)#
r23 <- fourth_order(fr2,r2_list,dr2)
call <- function(S,T,t,K,r,s,q) {#
	d1 <- (log(S/K)+(r-q+0.5*s^2)*(T-t))/(s*sqrt(T-t))#
	d2 <- d1-s*sqrt(T-t)#
	phi_d1 <- de_int(d1,1650)#
	phi_d2 <- de_int(d2,1650) #
	S*exp(-q*(T-t))* phi_d1 - K*exp(-r*(T-t))*phi_d2#
}
dr2 <- 0.1#
r2_list <- seq(from = 50, to = 55, by = dr2);#
fr2_data <- fr2(r2_list);#
n <- length(fr2_data);#
#
dr2_exact <- delta(r,0.5,0.0,45,0.06,0.25,0.02)#
r21 <- first_order(fr2,r2_list,dr2)#
r22 <- second_order(fr2,r2_list,dr2)#
r23 <- fourth_order(fr2,r2_list,dr2)
bsc <- function(S, T, t, K, r, s, q) {#
d1 <- (log(S/K)+(r-q+0.5*s^2)*(T-t))/(s*sqrt(T-t))#
#
d2 <- d1-s*sqrt(T-t)#
S*exp(-q*(T-t))*pnorm(d1)-K*exp(-r*(T-t))*pnorm(d2)#
#
}#
fS <- function(S)#
	bsc(S,0.5,0.0,45,0.06,0.25,0.02)#
fT <- function(T)#
	bsc(50,T,0.0,45,0.06,0.25,0.02)#
ft <- function(t)#
	bsc(50,0.5,t,45,0.06,0.25,0.02)#
fK <- function(K)#
	bsc(50,0.5,0.0,K,0.06,0.25,0.02)#
fr <- function(r)#
	bsc(50,0.5,0.0,45,r,0.25,0.02)#
fr2 <- function(r)#
	call(50,0.5,0.0,45,r,0.25,0.02)#
fs <- function(s)#
	bsc(50,0.5,0.0,45,0.06,s,0.02)#
fq <- function(q)#
	bsc(50,0.5,0.0,45,0.06,0.25,q)#
fg <- function(g)#
	delta(g,0.5,0.0,45,0.06,0.25,0.02)#
#
#Delta#
dt <- 0.5;#
S_list <- seq(from = 25, to = 100, by = dt);#
f_data <- fS(S_list);#
#
n <- length(f_data);#
df1 <- (f_data[2:n]-f_data[1:(n-1)])/dt;#
df2 <- (f_data[3:n]-f_data[1:(n-2)])/(2*dt);#
#
delta <- function(S,T,t,K,r,s,q) {#
d1 <- (log(S/K)+(r-q+0.5*s^2)*(T-t))/(s*sqrt(T-t))#
exp(-q*(T-t))*pnorm(d1)#
}#
#
df_exact <- delta(S_list,0.5,0.0,45,0.06,0.25,0.02);#
d1 <- first_order(fS,S_list,dt)#
d2 <- second_order(fS,S_list,dt)#
d3 <- fourth_order(fS,S_list,dt)#
#
e1 <- df_exact[1:(n-1)] - df1;#
e2 <- df_exact[2:(n-1)] - df2;#
#
#Vega#
ds <- 0.1#
s_list <- seq(from = 1, to = 5, by = ds);#
fs_data <- fs(s_list);	#
#
n2 <- length(fs_data);#
#
vf_exact <- vega(50,0.5,0.0,45,0.06,s_list,0.02)#
v1 <- first_order(fs,s_list,ds)#
v2 <- second_order(fs,s_list,ds)#
v3 <- fourth_order(fs,s_list,ds)#
#
#Theta#
dt <- 0.01#
t_list <- seq(from = 0, to = 0.4, by = dt);#
ft_data <- ft(t_list);#
n <- length(ft_data);#
#
dT_exact <- theta(50,0.5,t_list,45,0.06,0.25,0.02)#
T1 <- first_order(ft,t_list,dt)#
T2 <- second_order(ft,t_list,dt)#
T3 <- fourth_order(ft,t_list,dt)#
#
#Rho#
dr <- 0.01#
r_list <- seq(from = 0, to = 0.4, by = dr);#
fr_data <- fr(r_list);#
n <- length(fr_data);#
#
dr_exact <- rho(50,0.5,0.0,45,r_list,0.25,0.02)#
r1 <- first_order(fr,r_list,dr)#
r2 <- second_order(fr,r_list,dr)#
r3 <- fourth_order(fr,r_list,dr)#
#
#gamma#
dg <- 1#
g_list <- seq(from = 25, to = 100, by = dg);#
fg_data <- fg(g_list);#
n <- length(fg_data);#
#
dg_exact <- gamma(g_list,0.5,0.0,45,0.06,0.25,0.02)#
g1 <- first_order(fg,g_list,dg)#
g2 <- second_order(fg,g_list,dg)#
g3 <- fourth_order(fg,g_list,dg)#
#
first_order <- function(f,S,dS) {#
(f(S+dS)-f(S))/dS#
}#
#
second_order <- function(f,S,dS) {#
(f(S+dS)-f(S-dS))/(2*dS)#
}#
#
fourth_order <- function(f,S,dS) {#
(8*f(S+dS) - 8*f(S-dS) - f(S+2*dS) + f(S-2*dS))/(12*dS)#
}#
#4a#
vega <- function(S,T,t,K,r,s,q) {#
d1 <- (log(S/K)+(r-q+0.5*s^2)*(T-t))/(s*sqrt(T-t))#
d2 <- d1-s*sqrt(T-t)#
phi <-exp(-d1^2/2)/sqrt(2*pi)#
S*exp(-q*(T-t)) * phi * sqrt(T-t)#
}#
#
rho <- function(S,T,t,K,r,s,q) {#
d1 <- (log(S/K)+(r-q+0.5*s^2)*(T-t))/(s*sqrt(T-t))#
d2 <- d1-s*sqrt(T-t)#
K*(T-t)*exp(-r*(T-t))*pnorm(d2)#
}#
#
gamma <- function(S,T,t,K,r,s,q) {#
d1 <- (log(S/K)+(r-q+0.5*s^2)*(T-t))/(s*sqrt(T-t))#
d2 <- d1-s*sqrt(T-t)#
phi <-exp(-d2^2/2)/sqrt(2*pi)#
K*exp(-r*(T-t)) * phi / (S^2*s*sqrt(T-t))#
}#
#
theta <- function(S,T,t,K,r,s,q) {#
d1 <- (log(S/K)+(r-q+0.5*s^2)*(T-t))/(s*sqrt(T-t))#
d2 <- d1-s*sqrt(T-t)#
phi <-exp(-d1^2/2)/sqrt(2*pi)#
-exp(-q*(T-t)) * S*phi*s/(2*sqrt(T-t)) - r*K*exp(-r*(T-t))*pnorm(d2) + q*S*exp(-q*(T-t))*pnorm(d1)#
}#
#
#3C#
fourth_order(fS,50,0.5)#
#
#5#
a <- -1#
b <- 2#
h <- (a + b)/20;#
#
f <- function(x) {#
	exp(-x^2/2)/sqrt(2*pi)#
}#
#
left <- function(f,a,b,n) { #
x <- a + (b-a)/n*(0:n-1); #
sum((b-a)/n*f(x)) #
}#
#
right <- function(f,a,b,n) {#
	x <- a + (b-a)/n*(1:n);#
	sum((b-a)/n*f(x))#
}#
#
right(f,a,b,10)#
right(f,a,b,100)#
#scales linearly#
pnorm(2) - pnorm(-1) - right(f,a,b,10)#
pnorm(2) - pnorm(-1) - right(f,a,b,100)#
#5 b#
de_int <- function(a,n) {#
	right(f,-100,a,n)#
}#
#
#5 c#
call <- function(S,T,t,K,r,s,q) {#
	d1 <- (log(S/K)+(r-q+0.5*s^2)*(T-t))/(s*sqrt(T-t))#
	d2 <- d1-s*sqrt(T-t)#
	phi_d1 <- de_int(d1,1640)#
	phi_d2 <- de_int(d2,1640) #
	S*exp(-q*(T-t))* phi_d1 - K*exp(-r*(T-t))*phi_d2#
}#
#
#5 D#
rho2 <- function(S,T,t,K,r,s,q) {#
	K*(T-t)*exp(-r*(T-t))*pnorm()#
}#
#
dr2 <- 0.01#
r2_list <- seq(from = 0, to = 0.4, by = dr2);#
fr2_data <- fr2(r2_list);#
n <- length(fr2_data);#
#
dr2_exact <- rho(50,0.5,0.0,45,r2_list,0.25,0.02)#
r21 <- first_order(fr2,r2_list,dr2)#
r22 <- second_order(fr2,r2_list,dr2)#
r23 <- fourth_order(fr2,r2_list,dr2)#
#
first_order(fS,50,c(1,0.1,0.01)) -delta(50,0.5,0.0,45,0.06,0.25,0.02)#
second_order(fS,50,c(1,0.1,0.01)) - delta(50,0.5,0.0,45,0.06,0.25,0.02)#
fourth_order(fS,50,c(1,0.1,0.01)) - delta(50,0.5,0.0,45,0.06,0.25,0.02)#
#
first_order(ft,0,c(0.1,0.01,0.001)) -theta(50,0.5,0.0,45,0.06,0.25,0.02)#
second_order(ft,0,c(0.1,0.01,0.001)) -theta(50,0.5,0.0,45,0.06,0.25,0.02)#
fourth_order(ft,0,c(0.1,0.01,0.001)) -theta(50,0.5,0.0,45,0.06,0.25,0.02)#
#
first_order(fr,0.06,c(0.1,0.01,0.001)) -rho(50,0.5,0.0,45,0.06,0.25,0.02)#
second_order(fr,0.06,c(0.1,0.01,0.001)) -rho(50,0.5,0.0,45,0.06,0.25,0.02)#
fourth_order(fr,0.06,c(0.1,0.01,0.001)) -rho(50,0.5,0.0,45,0.06,0.25,0.02)#
#
first_order(fs,0.25,c(0.1,0.01,0.001)) -vega(50,0.5,0.0,45,0.06,0.25,0.02)#
second_order(fs,0.25,c(0.1,0.01,0.001)) -vega(50,0.5,0.0,45,0.06,0.25,0.02)#
fourth_order(fs,0.25,c(0.1,0.01,0.001)) -vega(50,0.5,0.0,45,0.06,0.25,0.02)
plot(r2_list,dr2_exact)
dr2 <- 0.001#
r2_list <- seq(from = 0, to = 0.4, by = dr2);#
fr2_data <- fr2(r2_list);#
n <- length(fr2_data);#
#
dr2_exact <- rho(50,0.5,0.0,45,r2_list,0.25,0.02)#
r21 <- first_order(fr2,r2_list,dr2)#
r22 <- second_order(fr2,r2_list,dr2)#
r23 <- fourth_order(fr2,r2_list,dr2)
length(n)
n
401*2
dr2 <- 0.001#
r2_list <- seq(from = 0, to = 0.4, by = dr2);#
fr2_data <- fr2(r2_list);#
n <- length(fr2_data);#
#
dr2_exact <- rho(50,0.5,0.0,45,r2_list,0.25,0.02)#
r21 <- first_order(fr2,r2_list,dr2)#
r22 <- second_order(fr2,r2_list,dr2)#
r23 <- fourth_order(fr2,r2_list,dr2)
n
call <- function(S,T,t,K,r,s,q) {#
	d1 <- (log(S/K)+(r-q+0.5*s^2)*(T-t))/(s*sqrt(T-t))#
	d2 <- d1-s*sqrt(T-t)#
	phi_d1 <- de_int(d1,4010)#
	phi_d2 <- de_int(d2,4010) #
	S*exp(-q*(T-t))* phi_d1 - K*exp(-r*(T-t))*phi_d2#
}#
#
#5 D#
rho2 <- function(S,T,t,K,r,s,q) {#
	K*(T-t)*exp(-r*(T-t))*pnorm()#
}#
#
dr2 <- 0.001#
r2_list <- seq(from = 0, to = 0.4, by = dr2);#
fr2_data <- fr2(r2_list);#
n <- length(fr2_data);#
#
dr2_exact <- rho(50,0.5,0.0,45,r2_list,0.25,0.02)#
r21 <- first_order(fr2,r2_list,dr2)#
r22 <- second_order(fr2,r2_list,dr2)#
r23 <- fourth_order(fr2,r2_list,dr2)
r21
plot(r2_list,dr2_exact)
plot(r2_list,r21)
plot(r2_list,dr2_exact)
lines(r2_list,r21)
lines(r2_list,r22)
lines(r2_list,r23)
first_order(fg,50,c(0.1,0.01,0.001)) -gamma(50,0.5,0.0,45,0.06,0.25,0.02)
second_order(fg,50,c(0.1,0.01,0.001)) -gamma(50,0.5,0.0,45,0.06,0.25,0.02)#
fourth_order(fg,50,c(0.1,0.01,0.001)) -gamma(50,0.5,0.0,45,0.06,0.25,0.02)
first_order(fg,50,c(0.1,0.01,0.001)) -gamma(50,0.5,0.0,45,0.06,0.25,0.02)#
second_order(fg,50,c(0.1,0.01,0.001)) -gamma(50,0.5,0.0,45,0.06,0.25,0.02)#
fourth_order(fg,50,c(1,0.1,0.01)) -gamma(50,0.5,0.0,45,0.06,0.25,0.02)
dr2 <- 0.1#
r2_list <- seq(from = 0, to = 0.4, by = dr2);#
fr2_data <- fr2(r2_list);#
n <- length(fr2_data);
n
dr2 <- 0.1#
r2_list <- seq(from = 0, to = 0.4, by = dr2);#
fr2_data <- fr2(r2_list);#
n <- length(fr2_data);#
#
dr2_exact <- rho(50,0.5,0.0,45,r2_list,0.25,0.02)#
r21 <- first_order(fr2,r2_list,dr2)#
r22 <- second_order(fr2,r2_list,dr2)#
r23 <- fourth_order(fr2,r2_list,dr2)
plot(r2_list,dr2_exact
)
lines(r2_list,r21)
plot(r21)
dr2 <- 0.01#
r2_list <- seq(from = 0, to = 0.4, by = dr2);#
fr2_data <- fr2(r2_list);#
n <- length(fr2_data);#
#
dr2_exact <- rho(50,0.5,0.0,45,r2_list,0.25,0.02)#
r21 <- first_order(fr2,r2_list,dr2)#
r22 <- second_order(fr2,r2_list,dr2)#
r23 <- fourth_order(fr2,r2_list,dr2)
n
n*20
call <- function(S,T,t,K,r,s,q) {#
	d1 <- (log(S/K)+(r-q+0.5*s^2)*(T-t))/(s*sqrt(T-t))#
	d2 <- d1-s*sqrt(T-t)#
	phi_d1 <- de_int(d1,820)#
	phi_d2 <- de_int(d2,820) #
	S*exp(-q*(T-t))* phi_d1 - K*exp(-r*(T-t))*phi_d2#
}#
#
#5 D#
dr2 <- 0.01#
r2_list <- seq(from = 0, to = 0.4, by = dr2);#
fr2_data <- fr2(r2_list);#
n <- length(fr2_data);#
#
dr2_exact <- rho(50,0.5,0.0,45,r2_list,0.25,0.02)#
r21 <- first_order(fr2,r2_list,dr2)#
r22 <- second_order(fr2,r2_list,dr2)#
r23 <- fourth_order(fr2,r2_list,dr2)
plot(r2_list,dr2_exact)
lines(r2_list,r21)
lines(r2_list,r22)
lines(r2_list,r23)
fr2 <- function(r)#
	call(50,0.5,0.0,45,r,0.25,0.02)
call <- function(S,T,t,K,r,s,q) {#
	d1 <- (log(S/K)+(r-q+0.5*s^2)*(T-t))/(s*sqrt(T-t))#
	d2 <- d1-s*sqrt(T-t)#
	phi_d1 <- de_int(d1,820)#
	phi_d2 <- de_int(d2,820) #
	S*exp(-q*(T-t))* phi_d1 - K*exp(-r*(T-t))*phi_d2#
}#
#
#5 D#
dr2 <- 0.01#
r2_list <- seq(from = 0, to = 0.4, by = dr2);#
fr2_data <- fr2(r2_list);#
n <- length(fr2_data);#
#
dr2_exact <- rho(50,0.5,0.0,45,r2_list,0.25,0.02)#
r21 <- first_order(fr2,r2_list,dr2)#
r22 <- second_order(fr2,r2_list,dr2)#
r23 <- fourth_order(fr2,r2_list,dr2)
plot(r2_list,dr2_exact)
lines(r2_list,r21)
lines(r2_list,r22)
lines(r2_list,r23)
plot(r2_list,dr2_exact)#
> lines(r2_list,r21)#
> lines(r2_list,r22)#
> lines(r2_list,r23)
plot(r2_list,dr2_exact)#
lines(r2_list,r21)#
lines(r2_list,r22)#
lines(r2_list,r23)
f <- function(x)
x
left
left(f,1,3,2)
mid
right(f,1,3,2)
left(f,1,3,3)
2/3+4/3
f
help names()
names(a)
names(vec) <- c("First", "Last")
vec_cha
vec <- c("Monday","Tuesday")
sb <- c(1,2,3,4,5,7,8)
sb <- c(1,2)
bo <- c(2,6)
names(sb) <- vec
names(bo) <- vec
vec
sb;bo
91+31+68
68+54
90+16+54
31+16
190+160\
190+160
181+47+122
# econ424lab1.r#
##
# author: E. Zivot#
# created: September 24, 2009#
# revision history:#
# June 21, 2016#
#   Updated for summer 2016#
# January 5, 2016#
#   updated for winter 2016#
# June 22, 2015#
#   updated code for summer 2015#
# June 27, 2013#
#   updated code for summer 2013#
# June 27, 2011#
#   updated code for Summer 2011 #
#   #
##
# R functions used#
##
# as.Date()			coerce to Date object#
# as.numeric()		coerce to numeric object#
# class()			return or set class of object#
# colnames()		extract column names#
# format()			format output#
# head()			show fist few rows of data object#
# read.csv()		read comma separated file into R#
# rownames()#
# seq()			create sequence#
# tail()			show last few rows of data object#
##
# R packages used (please install from CRAN)#
# dygraphs#
# xts#
# set output options to show only 4 significant digits#
options(digits = 3)#
# these libraries need to be downloaded and installed first. Within Rstudio, go to the packages tab (on the lower righthand side view pane)#
# and click the Install button. In the Install from select box, choose Repository. In the Packages box#
# type dygraphs xts and the press the Install button.#
library(dygraphs)#
library(xts)#
##
# read .csv files containing Yahoo! monthly adjusted closing price data on sbux #
# from March, 1993 through March 2008. The file sbuxPrices.csv should be downloaded from Canvas to #
# a folder on your computer. Note the location of this file and set the R working director to this location#
# using the setwd() command. For example, the code below sets the working directory to #
# C:\Users\ezivot\Dropbox\econ424\summer2013\#
##
# setwd("C:\\Users\\ezivot\\Dropbox\\econ424\\summer2013\\")#
##
# Note the double "\\" used in the path. This is because "\" is a special control character. Now make #
# sure to change the path to where the data is on your system#
setwd("~/Documents/CFRM 462/")          #
# read the sbux prices into a data.frame object. First look at the online help file#
# for read.csv#
?read.csv#
# now read in the data - make sure to change the path to where the data is on your#
# system#
sbux.df = read.csv(file="sbuxPrices.csv", #
                   header=TRUE, stringsAsFactors=FALSE)#
# sbux.df is a data.frame object. Data.frames are rectangular data objects typically with#
# observations in rows and variables in columns#
class(sbux.df)#
str(sbux.df)#
head(sbux.df)#
tail(sbux.df)#
colnames(sbux.df)#
class(sbux.df$Date)#
class(sbux.df$Adj.Close)#
# notice how dates are not the end of month dates. This is Yahoo!'s fault when#
# you download monthly data. Yahoo! doesn't get the dates right for the adjusted#
# close data.#
##
# subsetting operations#
##
# extract the first 5 rows of the price data. #
sbux.df[1:5, "Adj.Close"]#
sbux.df[1:5, 2]#
sbux.df$Adj.Close[1:5]#
# in the above operations, the dimension information was lost. To preserve#
# the dimension information use drop=FALSE#
sbux.df[1:5, "Adj.Close", drop=FALSE]#
sbux.df[1:5, 2, drop=FALSE]#
sbux.df$Adj.Close[1:5, drop=FALSE]#
# drop=FALSE had no effect on the last command, why?#
# find indices associated with the dates 3/1/1994 and 3/1/1995#
which(sbux.df$Date == "3/1/1994")#
which(sbux.df == "3/1/1995")#
# extract prices between 3/1/1994 and 3/1/1995#
sbux.df[13:25,]#
# create a new data.frame containing the price data with the dates as the row names#
sbuxPrices.df = sbux.df[, "Adj.Close", drop=FALSE]#
rownames(sbuxPrices.df) = sbux.df$Date#
head(sbuxPrices.df)#
# with Dates as rownames, you can subset directly on the dates#
# find indices associated with the dates 3/1/1994 and 3/1/1995#
sbuxPrices.df["3/1/1994", 1]#
sbuxPrices.df["3/1/1995", 1]#
# to show the rownames use drop=FALSE#
sbuxPrices.df["3/1/1994", 1, drop=FALSE]#
##
# plot the data#
##
# note: the default plot is a "points" plot#
plot(sbux.df$Adj.Close)#
# let's make a better plot#
# type="l" specifies a line plot#
# col="blue" specifies blue line color#
# lwd=2 doubles the line thickness#
# ylab="Adjusted close" adds a y axis label#
# main="Monthly closing price of SBUX" adds a title#
plot(sbux.df$Adj.Close, type="l", col="blue", #
     lwd=2, ylab="Adjusted close",#
     main="Monthly closing price of SBUX")#
# now add a legend#
legend(x="topleft", legend="SBUX", #
       lty=1, lwd=2, col="blue")#
##
# compute returns#
##
# simple 1-month returns#
n = nrow(sbuxPrices.df)#
sbux.ret = (sbuxPrices.df[2:n,1] - sbuxPrices.df[1:(n-1),1])/sbuxPrices.df[1:(n-1),1]#
# notice that sbux.ret is not a data.frame object#
class(sbux.ret)#
# now add dates as names to the vector. #
names(sbux.ret) = rownames(sbuxPrices.df)[2:n]#
head(sbux.ret)#
# Note: to ensure that sbux.ret is a data.frame use drop=FALSE when computing returns#
sbux.ret.df = (sbuxPrices.df[2:n,1,drop=FALSE] - sbuxPrices.df[1:(n-1),1,drop=FALSE])/sbuxPrices.df[1:(n-1),1,drop=FALSE]#
# continuously compounded 1-month returns#
sbux.ccret = log(1 + sbux.ret)#
# alternatively#
sbux.ccret = log(sbuxPrices.df[2:n,1]) - log(sbuxPrices.df[1:(n-1),1])#
names(sbux.ccret) = rownames(sbuxPrices.df)[2:n]#
head(sbux.ccret)#
# compare the simple and cc returns#
head(cbind(sbux.ret, sbux.ccret))#
# plot the simple and cc returns in separate graphs#
# split screen into 2 rows and 1 column#
par(mfrow=c(2,1))#
# plot simple returns first#
plot(sbux.ret, type="l", col="blue", lwd=2, ylab="Return",#
     main="Monthly Simple Returns on SBUX")#
abline(h=0)     #
# next plot the cc returns#
plot(sbux.ccret, type="l", col="blue", lwd=2, ylab="Return",#
     main="Monthly Continuously Compounded Returns on SBUX")#
abline(h=0)     #
# reset the screen to 1 row and 1 column#
par(mfrow=c(1,1))     #
# plot the returns on the same graph#
plot(sbux.ret, type="l", col="blue", lwd=2, ylab="Return",#
     main="Monthly Returns on SBUX")#
# add horizontal line at zero#
abline(h=0)     #
# add the cc returns#
lines(sbux.ccret, col="red", lwd=2)#
# add a legend#
legend(x="bottomright", legend=c("Simple", "CC"), #
       lty=1, lwd=2, col=c("blue","red"))#
##
# calculate growth of $1 invested in SBUX#
##
# compute gross returns#
sbux.gret = 1 + sbux.ret#
# compute future values#
sbux.fv = cumprod(sbux.gret)#
plot(sbux.fv, type="l", col="blue", lwd=2, ylab="Dollars", #
     main="FV of $1 invested in SBUX")#
##
# dynamic JavaScript web graphics#
# see the examples at https://rstudio.github.io/dygraphs/#
##
# first you need to create xts objects (a type of time series object) for the prices and#
# returns#
sbuxPrices.x = xts(sbuxPrices.df, as.Date(rownames(sbuxPrices.df), format="%m/%d/%Y"))#
sbuxRet.x = xts(sbux.ret, as.Date(names(sbux.ret), format="%m/%d/%Y"))#
# create dynamic graph of prices - graph will be displayed in Rstudio viewer pane#
dygraph(sbuxPrices.x)#
# create dynamic graph for returns#
dygraph(sbuxRet.x)
# note: the default plot is a "points" plot#
plot(sbux.df$Adj.Close)
# lwd=2 doubles the line thickness#
# ylab="Adjusted close" adds a y axis label#
# main="Monthly closing price of SBUX" adds a title#
plot(sbux.df$Adj.Close, type="l", col="blue", #
     lwd=2, ylab="Adjusted close",#
     main="Monthly closing price of SBUX")#
# now add a legend#
legend(x="topleft", legend="SBUX", #
       lty=1, lwd=2, col="blue")
# compute returns#
##
# simple 1-month returns#
n = nrow(sbuxPrices.df)#
sbux.ret = (sbuxPrices.df[2:n,1] - sbuxPrices.df[1:(n-1),1])/sbuxPrices.df[1:(n-1),1]#
# notice that sbux.ret is not a data.frame object#
class(sbux.ret)#
# now add dates as names to the vector. #
names(sbux.ret) = rownames(sbuxPrices.df)[2:n]#
head(sbux.ret)
# Note: to ensure that sbux.ret is a data.frame use drop=FALSE when computing returns#
sbux.ret.df = (sbuxPrices.df[2:n,1,drop=FALSE] - sbuxPrices.df[1:(n-1),1,drop=FALSE])/sbuxPrices.df[1:(n-1),1,drop=FALSE]
# continuously compounded 1-month returns#
sbux.ccret = log(1 + sbux.ret)#
# alternatively#
sbux.ccret = log(sbuxPrices.df[2:n,1]) - log(sbuxPrices.df[1:(n-1),1])#
names(sbux.ccret) = rownames(sbuxPrices.df)[2:n]#
head(sbux.ccret)
# compare the simple and cc returns#
head(cbind(sbux.ret, sbux.ccret))#
# plot the simple and cc returns in separate graphs#
# split screen into 2 rows and 1 column#
par(mfrow=c(2,1))#
# plot simple returns first#
plot(sbux.ret, type="l", col="blue", lwd=2, ylab="Return",#
     main="Monthly Simple Returns on SBUX")#
abline(h=0)     #
# next plot the cc returns#
plot(sbux.ccret, type="l", col="blue", lwd=2, ylab="Return",#
     main="Monthly Continuously Compounded Returns on SBUX")#
abline(h=0)     #
# reset the screen to 1 row and 1 column#
par(mfrow=c(1,1))
# plot the returns on the same graph#
plot(sbux.ret, type="l", col="blue", lwd=2, ylab="Return",#
     main="Monthly Returns on SBUX")#
# add horizontal line at zero#
abline(h=0)     #
# add the cc returns#
lines(sbux.ccret, col="red", lwd=2)#
# add a legend#
legend(x="bottomright", legend=c("Simple", "CC"), #
       lty=1, lwd=2, col=c("blue","red"))
##
# calculate growth of $1 invested in SBUX#
##
# compute gross returns#
sbux.gret = 1 + sbux.ret#
# compute future values#
sbux.fv = cumprod(sbux.gret)#
plot(sbux.fv, type="l", col="blue", lwd=2, ylab="Dollars", #
     main="FV of $1 invested in SBUX")
##
# dynamic JavaScript web graphics#
# see the examples at https://rstudio.github.io/dygraphs/#
##
# first you need to create xts objects (a type of time series object) for the prices and#
# returns#
sbuxPrices.x = xts(sbuxPrices.df, as.Date(rownames(sbuxPrices.df), format="%m/%d/%Y"))#
sbuxRet.x = xts(sbux.ret, as.Date(names(sbux.ret), format="%m/%d/%Y"))#
# create dynamic graph of prices - graph will be displayed in Rstudio viewer pane#
dygraph(sbuxPrices.x)#
# create dynamic graph for returns#
dygraph(sbuxRet.x)
# note: the default plot is a "points" plot#
plot(sbux.df$Adj.Close)
# let's make a better plot#
# type="l" specifies a line plot#
# col="blue" specifies blue line color#
# lwd=2 doubles the line thickness#
# ylab="Adjusted close" adds a y axis label#
# main="Monthly closing price of SBUX" adds a title#
plot(sbux.df$Adj.Close, type="l", col="blue", #
     lwd=2, ylab="Adjusted close",#
     main="Monthly closing price of SBUX")#
# now add a legend#
legend(x="topleft", legend="SBUX", #
       lty=1, lwd=2, col="blue")
# simple 1-month returns#
n = nrow(sbuxPrices.df)#
sbux.ret = (sbuxPrices.df[2:n,1] - sbuxPrices.df[1:(n-1),1])/sbuxPrices.df[1:(n-1),1]#
# notice that sbux.ret is not a data.frame object#
class(sbux.ret)#
# now add dates as names to the vector. #
names(sbux.ret) = rownames(sbuxPrices.df)[2:n]#
head(sbux.ret)#
# Note: to ensure that sbux.ret is a data.frame use drop=FALSE when computing returns#
sbux.ret.df = (sbuxPrices.df[2:n,1,drop=FALSE] - sbuxPrices.df[1:(n-1),1,drop=FALSE])/sbuxPrices.df[1:(n-1),1,drop=FALSE]
# simple 1-month returns#
n = nrow(sbuxPrices.df)#
sbux.ret = (sbuxPrices.df[2:n,1] - sbuxPrices.df[1:(n-1),1])/sbuxPrices.df[1:(n-1),1]#
# notice that sbux.ret is not a data.frame object#
class(sbux.ret)#
# now add dates as names to the vector. #
names(sbux.ret) = rownames(sbuxPrices.df)[2:n]#
head(sbux.ret)#
# Note: to ensure that sbux.ret is a data.frame use drop=FALSE when computing returns#
sbux.ret.df = (sbuxPrices.df[2:n,1,drop=FALSE] - sbuxPrices.df[1:(n-1),1,drop=FALSE])/sbuxPrices.df[1:(n-1),1,drop=FALSE]
# simple 1-month returns#
n = nrow(sbuxPrices.df)#
sbux.ret = (sbuxPrices.df[2:n,1] - sbuxPrices.df[1:(n-1),1])/sbuxPrices.df[1:(n-1),1]#
# notice that sbux.ret is not a data.frame object#
class(sbux.ret)#
# now add dates as names to the vector. #
names(sbux.ret) = rownames(sbuxPrices.df)[2:n]#
head(sbux.ret)#
# Note: to ensure that sbux.ret is a data.frame use drop=FALSE when computing returns#
sbux.ret.df = (sbuxPrices.df[2:n,1,drop=FALSE] - sbuxPrices.df[1:(n-1),1,drop=FALSE])/sbuxPrices.df[1:(n-1),1,drop=FALSE]
# simple 1-month returns#
n = nrow(sbuxPrices.df)#
sbux.ret = (sbuxPrices.df[2:n,1] - sbuxPrices.df[1:(n-1),1])/sbuxPrices.df[1:(n-1),1]#
# notice that sbux.ret is not a data.frame object#
class(sbux.ret)#
# now add dates as names to the vector. #
names(sbux.ret) = rownames(sbuxPrices.df)[2:n]#
head(sbux.ret)#
# Note: to ensure that sbux.ret is a data.frame use drop=FALSE when computing returns#
sbux.ret.df = (sbuxPrices.df[2:n,1,drop=FALSE] - sbuxPrices.df[1:(n-1),1,drop=FALSE])/sbuxPrices.df[1:(n-1),1,drop=FALSE]
# simple 1-month returns#
n = nrow(sbuxPrices.df)#
sbux.ret = (sbuxPrices.df[2:n,1] - sbuxPrices.df[1:(n-1),1])/sbuxPrices.df[1:(n-1),1]#
# notice that sbux.ret is not a data.frame object#
class(sbux.ret)#
# now add dates as names to the vector. #
names(sbux.ret) = rownames(sbuxPrices.df)[2:n]#
head(sbux.ret)#
# Note: to ensure that sbux.ret is a data.frame use drop=FALSE when computing returns#
sbux.ret.df = (sbuxPrices.df[2:n,1,drop=FALSE] - sbuxPrices.df[1:(n-1),1,drop=FALSE])/sbuxPrices.df[1:(n-1),1,drop=FALSE]
# simple 1-month returns#
n = nrow(sbuxPrices.df)#
sbux.ret = (sbuxPrices.df[2:n,1] - sbuxPrices.df[1:(n-1),1])/sbuxPrices.df[1:(n-1),1]#
# notice that sbux.ret is not a data.frame object#
class(sbux.ret)#
# now add dates as names to the vector. #
names(sbux.ret) = rownames(sbuxPrices.df)[2:n]#
head(sbux.ret)#
# Note: to ensure that sbux.ret is a data.frame use drop=FALSE when computing returns#
sbux.ret.df = (sbuxPrices.df[2:n,1,drop=FALSE] - sbuxPrices.df[1:(n-1),1,drop=FALSE])/sbuxPrices.df[1:(n-1),1,drop=FALSE]
# continuously compounded 1-month returns#
sbux.ccret = log(1 + sbux.ret)#
# alternatively#
sbux.ccret = log(sbuxPrices.df[2:n,1]) - log(sbuxPrices.df[1:(n-1),1])#
names(sbux.ccret) = rownames(sbuxPrices.df)[2:n]#
head(sbux.ccret)
# compare the simple and cc returns#
head(cbind(sbux.ret, sbux.ccret))#
# plot the simple and cc returns in separate graphs#
# split screen into 2 rows and 1 column#
par(mfrow=c(2,1))#
# plot simple returns first#
plot(sbux.ret, type="l", col="blue", lwd=2, ylab="Return",#
     main="Monthly Simple Returns on SBUX")#
abline(h=0)
# next plot the cc returns#
plot(sbux.ccret, type="l", col="blue", lwd=2, ylab="Return",#
     main="Monthly Continuously Compounded Returns on SBUX")#
abline(h=0)     #
# reset the screen to 1 row and 1 column#
par(mfrow=c(1,1))
# plot the returns on the same graph#
plot(sbux.ret, type="l", col="blue", lwd=2, ylab="Return",#
     main="Monthly Returns on SBUX")
# add horizontal line at zero#
abline(h=0)     #
# add the cc returns#
lines(sbux.ccret, col="red", lwd=2)#
# add a legend#
legend(x="bottomright", legend=c("Simple", "CC"), #
       lty=1, lwd=2, col=c("blue","red"))
# compute gross returns#
sbux.gret = 1 + sbux.ret#
# compute future values#
sbux.fv = cumprod(sbux.gret)#
plot(sbux.fv, type="l", col="blue", lwd=2, ylab="Dollars", #
     main="FV of $1 invested in SBUX")
# first you need to create xts objects (a type of time series object) for the prices and#
# returns#
sbuxPrices.x = xts(sbuxPrices.df, as.Date(rownames(sbuxPrices.df), format="%m/%d/%Y"))#
sbuxRet.x = xts(sbux.ret, as.Date(names(sbux.ret), format="%m/%d/%Y"))#
# create dynamic graph of prices - graph will be displayed in Rstudio viewer pane#
dygraph(sbuxPrices.x)#
# create dynamic graph for returns#
dygraph(sbuxRet.x)
